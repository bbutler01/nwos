")
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
edge [color = grey, arrowhead = none, arrowtail = none]
Information             [width = 1.5]
Information -> R
Information -> RStudio
R -> '@@1-1'            [lhead = cluster0]
RStudio -> '@@2'        [lhead = cluster1]
Sample -> Response
Response -> 'Base Weights' -> 'Nonresponse Adjustment'
# D-->E[Calibration]
# E-->F[Final Weights]
# F-->G[Trim]
# G-->H[Model Weights]
}
")
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
edge [color = grey, arrowhead = none, arrowtail = none]
Information             [width = 1.5]
Information -> R
Information -> RStudio
R -> '@@1-1'            [lhead = cluster0]
RStudio -> '@@2'        [lhead = cluster1]
Sample -> Response
Response -> 'Base Weights' -> 'Nonresponse Adjustment'
-> Calibration
-> Final Weights
# F-->G[Trim]
# G-->H[Model Weights]
}
")
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
edge [color = grey, arrowhead = none, arrowtail = none]
Sample
-> Response
-> 'Base Weights'
-> 'Nonresponse Adjustment'
-> Calibration
-> 'Final Weights'
-> Trim
-> 'Model Weights'
}
")
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
edge [color = grey, arrowhead = none, arrowtail = none]
Sample
-> Response
-> 'Base Weights'
-> 'Nonresponse Adjustment'
-> Calibration
-> 'Final Weights'
-> Trim
-> 'Model\nWeights'
}
")
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
edge [color = grey, arrowhead = none, arrowtail = none]
Sample
-> Response
-> 'Base\nWeights'
-> 'Nonresponse\nAdjustment'
-> Calibration
-> 'Final\nWeights'
-> Trim
-> 'Model\nWeights'
}
")
library(DiagrammeR)
library(DiagrammeR)
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
edge [color = grey, arrowhead = true, arrowtail = none]
# Flow chart elements
Sample
-> Response
-> 'Base\nWeights'
-> 'Nonresponse\nAdjustment'
-> Calibration
-> 'Final\nWeights'
-> Trim
-> 'Model\nWeights'
}
")
library(DiagrammeR)
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
edge [color = grey, arrowhead = 1, arrowtail = none]
# Flow chart elements
Sample
-> Response
-> 'Base\nWeights'
-> 'Nonresponse\nAdjustment'
-> Calibration
-> 'Final\nWeights'
-> Trim
-> 'Model\nWeights'
}
")
library(DiagrammeR)
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
node [fontname = Helvetica, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = darkslategray]
# edge [color = grey, arrowhead = none, arrowtail = none]
# Flow chart elements
Sample
-> Response
-> 'Base\nWeights'
-> 'Nonresponse\nAdjustment'
-> Calibration
-> 'Final\nWeights'
-> Trim
-> 'Model\nWeights'
}
")
library(DiagrammeR)
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
# node [fontname = Helvetica, fontcolor = darkslategray,
# shape = rectangle, fixedsize = true, width = 1,
# color = darkslategray]
# edge [color = grey, arrowhead = none, arrowtail = none]
# Flow chart elements
Sample
-> Response
-> 'Base\nWeights'
-> 'Nonresponse\nAdjustment'
-> Calibration
-> 'Final\nWeights'
-> Trim
-> 'Model\nWeights'
}
")
library(DiagrammeR)
grViz("
digraph nicegraph {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
# node [fontname = Helvetica, fontcolor = darkslategray,
# shape = rectangle, fixedsize = true, width = 1,
# color = darkslategray]
node [shape = rectangle]
# edge [color = grey, arrowhead = none, arrowtail = none]
# Flow chart elements
Sample
-> Response
-> 'Base\nWeights'
-> 'Nonresponse\nAdjustment'
-> Calibration
-> 'Final\nWeights'
-> Trim
-> 'Model\nWeights'
}
")
library(DiagrammeR)
grViz("
digraph weighting_flowchart {
# graph, node, and edge definitions
graph [compound = true, nodesep = .5, ranksep = .25,
color = crimson]
# node [fontname = Helvetica, fontcolor = darkslategray,
# shape = rectangle, fixedsize = true, width = 1,
# color = darkslategray]
node [shape = rectangle]
# edge [color = grey, arrowhead = none, arrowtail = none]
# Flow chart elements
Sample
-> Response
-> 'Base\nWeights'
-> 'Nonresponse\nAdjustment'
-> Calibration
-> 'Final\nWeights'
-> Trim
-> 'Model\nWeights'
}
")
mermaid("
graph TD
A[Sample]-->B[Response]
B-->C[Base Weights]
C-->D[Nonresponse Adjustment]
D-->E[Calibration]
E-->F[Final Weights]
F-->G[Trim]
")
?boxplot
?wtd.quantile
library(survey)
?wtd.quantile
library(Hmisc)
?wtd.quantile
?chisq.test
log(1)
log(10)
log(15)
log(2)
log(3)
plot(1:10,log(1:10))
?adist
?adist
citation()
citation("utils")
setwd("~/Dropbox (FFRC)/NWOS/FAMILY/2018/PROCESSING/WEIGHTS/")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(Hmisc)
setwd("~/Dropbox (FFRC)/NWOS/FAMILY/2018/PROCESSING/WEIGHTS/")
wi.ffo <- read.csv("DATA/WI_FFO_20170822.csv")
wi.ffo <- read.csv("/DATA/WI_FFO_20170822.csv")
getwd()
setwd("~/Dropbox (FFRC)/NWOS/FAMILY/2018/PROCESSING/WEIGHTS/")
getwd()
wi.ffo <- read.csv("~/Dropbox (FFRC)/NWOS/FAMILY/2018/PROCESSING/WEIGHTS//DATA/WI_FFO_20170822.csv")
View(wi.ffo)
wi.ffo <- data.frame(OWNER=wi.ffo$X, AC=wi.ffo$AC)
View(wi.ffo)
wi.ffo <- read.csv("~/Dropbox (FFRC)/NWOS/FAMILY/2018/PROCESSING/WEIGHTS//DATA/WI_FFO_20170822.csv")
wi.ffo <- data.frame(i=wi.ffo$X, a=wi.ffo$AC)
n <- 500
S <- sample(wi.ffo$i, n, prob=wi.ffo$a, replace=T)
S
View(wi.ffo)
i_s <- sample(wi.ffo$i, n, prob=wi.ffo$a, replace=T)
S <- data.frame(i = sample(wi.ffo$i, n, prob=wi.ffo$a, replace=T),
a = NA,
y1 = NA,
y2 = NA,
y3 = NA,
r1 = NA,
r2 = NA)
P <- data.frame(i=wi.ffo$X, a=wi.ffo$AC)
wi.ffo <- read.csv("~/Dropbox (FFRC)/NWOS/FAMILY/2018/PROCESSING/WEIGHTS//DATA/WI_FFO_20170822.csv")
P <- data.frame(i=wi.ffo$X, a=wi.ffo$AC)
S <- data.frame(i = sample(P$i, n, prob=P$a, replace=T),
a = NA,
y1 = NA,
y2 = NA,
y3 = NA,
r1 = NA,
r2 = NA)
S$a <- P$a[match(S$i, P$i)]
View(S)
summary(S)
summary(wi.ffo)
wi.ffo <- read.csv("~/Dropbox (FFRC)/NWOS/FAMILY/2018/PROCESSING/WEIGHTS//DATA/WI_FFO_20170823.csv")
summary(wi.ffo)
View(P)
P <- data.frame(i=wi.ffo$X, a=wi.ffo$AC)
summary(P)
n <- 500
S <- data.frame(i = sample(P$i, n, prob=P$a, replace=T),
a = NA,
y1 = NA,
y2 = NA,
y3 = NA,
r1 = NA,
r2 = NA)
S$a <- P$a[match(S$i, P$i)]
summary(S)
A <- sum(P$a)
A
N <- NROW(P)
N
N <- NROW(P)
N.VAR <- 0
A <- sum(P$a)
A.VAR <- 0
MEAN <- mean(P$a)
MEAN.VAR <- var(P$a)
Q1 <- quantile(P$a, 0.25)
Q2 <- quantile(P$a, 0.50)
Q3 <- quantile(P$a, 0.75)
MIN <- min(P$a)
MAX <- max(P$a)
sum(S$w)
View(S)
S$w <- (1/n) * (A/S$a)
N.W <- sum(S$w)
N.W
?runif
?rnorm
summary(P$r1)
P$r1 <- rnorm(NROW(P), 0.5, 1)
summary(P$r1)
P$r1 <- rnorm(NROW(P))
summary(P$r1)
(max(P$r1) - min(P$r1)
)
P$r1 <- (P$r1 - min(P$r1))/(max(P$r1) - min(P$r1))
summary(P$r1)
hist(P$r1)
S$r1 <- P$r1[match(S$i, P$i)]
S1 <- S
S1$a <- ifelse(S1$r1<0.5, NA, S1$a)
250/500
1(250/500)
1*(250/500)
1/(250/500)
?kable
View(S)
A <- sum(P$a) # 10723347
S$w <- (1/n) * (A/S$a)
S1$p_i
S1$s_i
S1$r_i <- 1
# S1.r <- XX
# S1$w_i <- S1$s_i * S1$r_i * S1.r
getwd()
setwd("~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/GRAPHICS/")
setwd("~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/")
183/532
148/532
setwd("/Users/brettbutler/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos")
rm(list=ls())
setwd("/Users/brettbutler/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_response_rate.R')
load("data/nwos_sample_data.RData")
nwos.sample.data$response <- ifelse(nwos.sample.data$owner.class=="FamilyForest", as.numeric(as.character(nwos.sample.data$response)), NA)
nwosResponseRates(nwos.sample.data$point.count,nwos.sample.data$response)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_response_rate.R')
?sum
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_response_rate.R')
load("data/nwos_sample_data.RData")
nwos.sample.data$domain <- ifelse(nwos.sample.data$owner.class=="FamilyForest", 1, 0)
nwos.sample.data$response <- ifelse(nwos.sample.data$owner.class=="FamilyForest",
as.numeric(as.character(nwos.sample.data$response)), NA)
sample.response.rate <- nwosResponseRates(nwos.sample.data$point.count,nwos.sample.data$response)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_weights.R')
nwos.sample.data$weights <- nwosWeights(point.count=nwos.sample.data$point.count,
area=nwos.sample.data$area,
domain=nwos.sample.data$domain,
stratum.area=35198019,
response.rate=sample.response.rate)
nwos.sample.data$weights
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_weights.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_weights.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_weights_trimmed.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_response_rate.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_weights_trimmed.R')
total.own <- nwosTotal(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=1,
area=nwos.sample.data$area,
units="ownerships")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_total.R')
total.own <- nwosTotal(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=1,
area=nwos.sample.data$area,
units="ownerships")
nwosTotal(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=1,
area=nwos.sample.data$area,
units="ownerships")
nwosTotal(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=1,
area=nwos.sample.data$area,
units="area")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_total.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_weights.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_total.R')
nwosTotal(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
area=nwos.sample.data$area,
units="ownerships")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_weights.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_total.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_variance.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_variance.R')
nwosMean(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=nwos.sample.data$area,
area=nwos.sample.data$area,
units="ownerships")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_mean.R')
nwosMean(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=nwos.sample.data$area,
area=nwos.sample.data$area,
units="ownerships")
nwosMean(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=nwos.sample.data$area,
area=nwos.sample.data$area,
units="area")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_mean.R')
nwos.sample.data$y_1
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_proportion.R')
nwosProportion(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=nwos.sample.data$y_1,
area=nwos.sample.data$area,
units="ownerships")
nwos.sample.data$y_1 <- as.numeric(as.character(nwos.sample.data$y_1))
nwosProportion(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=nwos.sample.data$y_1,
area=nwos.sample.data$area,
units="ownerships")
nwosProportion(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
y=nwos.sample.data$y_1,
area=nwos.sample.data$area,
units="area")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_quantile.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_quantile.R')
nwosQuantile(weight=nwos.sample.data$weight,
point.count=nwos.sample.data$point.count,
domain=nwos.sample.data$domain,
area=nwos.sample.data$area)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/ANALYSIS/nwos/R/nwos_quantile.R')
document()
library("devtools")
library(roxygen2)
document()
document()
file.exists("~/.ssh/id_rsa.pub")
library(nwos)
nwosMean
getwd()
document()
library(devtools)
library(roxygen2)
document()
?requireNamespace
?boot
libary(boot)
library(boot)
?boot
?sum
build --resave-data
?build
library(nwos)
nwosMean
document()
.rs.restartR()
document()
document()
list.files("/Users/brettbutler/Dropbox (FFRC)/FFRC_ADMIN/PERSONNEL/GRAD_STUDENTS/FALL_2018/APPLICATIONS")
list.files("/Users/brettbutler/Dropbox (FFRC)/FFRC_ADMIN/PERSONNEL/GRAD_STUDENTS/FALL_2018/APPLICATIONS")
list.files("/Users/brettbutler/Dropbox (FFRC)/FFRC_ADMIN/PERSONNEL/GRAD_STUDENTS/FALL_2018/APPLICATIONS")
list.files("/Users/brettbutler/Dropbox (FFRC)/FFRC_ADMIN/PERSONNEL/GRAD_STUDENTS/FALL_2018/APPLICATIONS")
