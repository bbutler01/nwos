setwd("..")
install("nwos")
# devtools::install_git("git://github.com/bbutler01/nwos.git")
library(nwos)
library(tidyverse)
wi <- tbl_df(read.csv("../data/wi.csv"))
rm(list=ls())
# devtools::install_git("git://github.com/bbutler01/nwos.git")
library(nwos)
library(tidyverse)
wi <- tbl_df(read.csv("../data/wi.csv"))
wi <- wi %>% mutate(ROW_NAME = row.names(wi),
AC_WOOD = ACRES_FOREST)
WI_REPLICATES <- nwos_replicates(index = row.names(wi), point.count = wi$POINT_COUNT, R = 100)
wi <- wi %>% mutate(FFO = if_else(LAND_USE == 1 & OWN_CD == 45 & AC_WOOD >= 1, 1, 0)) # Add stratum variable, FFO
WI_FFO_AREA <- nwos_stratum_area(stratum = wi$FFO, point.count = wi$POINT_COUNT, state.area = 33898733)
WI_FFO_AREA_REP <- sapply(WI_REPLICATES, nwos_stratum_area_replicates, data = wi, stratum.name = "FFO", state.area = 33898733)
wi <- wi %>% mutate(RESPONSE = if_else(RESPONSE_PROPENSITY >= 0.5, 1, 0)) %>%
mutate(RESPONSE = if_else(is.na(RESPONSE_PROPENSITY), 0, RESPONSE))
WI_FFO_RR <- nwos_response_rate(stratum = wi$FFO, point.count = wi$POINT_COUNT, response = wi$RESPONSE)
WI_FFO_RR_REP <- sapply(WI_REPLICATES, nwos_response_rate_replicates, data = wi, stratum.name = "FFO", response.name = "RESPONSE")
wi$WEIGHT <- nwos_weights(stratum = wi$FFO, point.count = wi$POINT_COUNT,
response = wi$RESPONSE, owner.area = wi$AC_WOOD,
stratum.area = WI_FFO_AREA, response.rate = WI_FFO_RR)
sum(wi$WEIGHT)
WI_FFO_OWN_TOTAL <- nwos_total(weight = wi$WEIGHT)
WI_FFO_OWN_TOTAL
WI_FFO_AC_TOTAL <- nwos_total(weight = wi$WEIGHT, area = wi$AC_WOOD)
WI_FFO_AC_TOTAL
stratum = wi$FFO
point.count = wi$POINT_COUNT
response = wi$RESPONSE
owner.area = wi$AC_WOOD
stratum.area = WI_FFO_AREA
response.rate = WI_FFO_RR
data <- data.frame(stratum = stratum, point.count = point.count, response = response, owner.area = owner.area) # Create data frame
View(data)
n.s <- as.numeric(data %>% filter(stratum %in% c(1), response %in% c(0,1)) %>% summarize(sum(point.count))) # Number of sample points in stratum
n.s
ifelse(data$owner.area == 0, 0,
((stratum.area / (data$owner.area * n.s)) * data$point.count) * (1 / response.rate) * data$stratum) # Weights
x - ifelse(data$owner.area == 0, 0,
((stratum.area / (data$owner.area * n.s)) * data$point.count) * (1 / response.rate) * data$stratum) # Weights
x <- ifelse(data$owner.area == 0, 0,
((stratum.area / (data$owner.area * n.s)) * data$point.count) * (1 / response.rate) * data$stratum) # Weights
x
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_weights.R')
wi$WEIGHT <- nwos_weights(stratum = wi$FFO, point.count = wi$POINT_COUNT,
response = wi$RESPONSE, owner.area = wi$AC_WOOD,
stratum.area = WI_FFO_AREA, response.rate = WI_FFO_RR)
WI_FFO_OWN_TOTAL <- nwos_total(weight = wi$WEIGHT)
WI_FFO_OWN_TOTAL
WI_FFO_AC_TOTAL <- nwos_total(weight = wi$WEIGHT, area = wi$AC_WOOD)
WI_FFO_AC_TOTAL
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
names(wi)
WI_FFO_Y1_OWN_PROP <- nwos_proportion(weight = wi$WEIGHT, domain = w$Y_1)
WI_FFO_Y1_OWN_PROP <- nwos_proportion(weight = wi$WEIGHT, domain = wi$Y_1)
WI_FFO_Y1_AC_PROP <- nwos_proportion(weight = wi$WEIGHT, area = wi$AC_WOOD, domain = wi$Y_1)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion_replicates.R')
WI_FFO_OWN_TOTAL_REP <- sapply(1:length(WI_REPLICATES), nwos_total_replicates, index.rep = WI_REPLICATES, data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
WI_FFO_OWN_TOTAL_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
WI_FFO_RR_REP <- sapply(WI_REPLICATES, nwos_response_rate_replicates, data = wi, stratum.name = "FFO", response.name = "RESPONSE")
WI_FFO_WEIGHTS_REP <- lapply(1:length(WI_REPLICATES), nwos_weights_replicates,
index.rep = WI_REPLICATES, data = wi,
stratum.area.rep = WI_FFO_AREA_REP, response.rate.rep = WI_FFO_RR_REP)
WI_FFO_OWN_TOTAL_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
WI_FFO_Y1_OWN_PROP <- nwos_proportion(weight = wi$WEIGHT, domain = wi$Y_1)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
WI_FFO_Y1_OWN_PROP <- nwos_proportion(weight = wi$WEIGHT, domain = wi$Y_1)
WI_FFO_OWN_TOTAL_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
wi <- wi %>% mutate(OWNER = 1)
WI_FFO_OWN_TOTAL_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
WI_FFO_OWN_TOTAL_REP
sqrt(var(WI_FFO_OWN_TOTAL_REP))
WI_FFO_Y1_OWN_PROP
WI_FFO_AC_TOTAL_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "AC_WOOD",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
WI_FFO_OWN_Y1_PROP_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
sqrt(var(WI_FFO_OWN_Y1_PROP_REP))
WI_FFO_AC_Y1_PROP_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "AC_WOOD",
domain.name = "Y_1",
base.name = "FFO",
variable.name = "FFO")
sqrt(var(WI_FFO_AC_Y1_PROP_REP))
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean.R')
WI_FFO_OWN_AC_MEAN <- nwos_proportion(weight = wi$WEIGHT, variable = wi$AC_WOOD)
WI_FFO_OWN_AC_MEAN <- nwos_mean(weight = wi$WEIGHT, variable = wi$AC_WOOD)
WI_FFO_OWN_AC_MEAN
WI_FFO_AC_AC_MEAN <- nwos_mean(weight = wi$WEIGHT, area = wi$AC_WOOD, variable = wi$AC_WOOD)
WI_FFO_AC_AC_MEAN
WI_FFO_OWN_AC_MEAN_REP <- sapply(1:length(WI_REPLICATES), nwos_proportion_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "FFO",
base.name = "FFO",
variable.name = "AC_WOOD")
sqrt(var(WI_FFO_OWN_AC_MEAN_REP))
WI_FFO_OWN_AC_MEAN_REP
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean_replicates.R')
WI_FFO_OWN_AC_MEAN_REP <- sapply(1:length(WI_REPLICATES), nwos_mean_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "FFO",
base.name = "FFO",
variable.name = "AC_WOOD")
WI_FFO_OWN_AC_MEAN_REP <- sapply(1:length(WI_REPLICATES), nwos_mean_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "FFO",
variable.name = "AC_WOOD")
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean_replicates.R')
WI_FFO_OWN_AC_MEAN_REP <- sapply(1:length(WI_REPLICATES), nwos_mean_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "FFO",
variable.name = "AC_WOOD")
sqrt(var(WI_FFO_OWN_AC_MEAN_REP))
WI_FFO_AC_AC_MEAN_REP <- sapply(1:length(WI_REPLICATES), nwos_mean_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "AC_WOOD",
domain.name = "FFO",
variable.name = "AC_WOOD")
sqrt(var(WI_FFO_AC_AC_MEAN_REP))
WI_FFO_AC_AC_MEAN
WI_FFO_AC_AC_MEAN_REP
WI_FFO_OWN_Y_3_MEAN <- nwos_mean(weight = wi$WEIGHT, variable = wi$Y_3)
WI_FFO_OWN_Y_3_MEAN
WI_FFO_OWN_Y_3_MEAN_REP <- sapply(1:length(WI_REPLICATES), nwos_mean_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "OWNER",
domain.name = "FFO",
variable.name = "Y_3")
sqrt(var(WI_FFO_OWN_Y_3_MEAN_REP))
WI_FFO_AC_Y_3_MEAN <- nwos_mean(weight = wi$WEIGHT, area = wi$AC_WOOD, variable = wi$Y_3)
WI_FFO_AC_Y_3_MEAN_REP <- sapply(1:length(WI_REPLICATES), nwos_mean_replicates, index.rep = WI_REPLICATES,
data = wi,
weight.rep = WI_FFO_WEIGHTS_REP,
owner.area.name = "AC_WOOD",
domain.name = "FFO",
variable.name = "Y_3")
WI_FFO_AC_Y_3_MEAN
sqrt(var(WI_FFO_AC_Y_3_MEAN_REP))
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion_replicates.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean_replicates.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_mean_replicates.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion_replicates.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
install.packages("survey")
?median
median
quantile
?UseMethod
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
weight = wi$WEIGHT
area = 1
domain = 1
variable = "AC_WOOD"
total <- nwos_total(weight = weight, area = area, domain = domain, variable = variable)
weight
variable = wi$AC_WOOD
total <- nwos_total(weight = weight, area = area, domain = domain, variable = variable)
total
total <- nwos_total(weight = weight, area = area, domain = domain, variable = 1)
total
x.min <- min(variable[domain==1], na.rm=T)
x.max <- max(variable[domain==1], na.rm=T)
x.min
x.max
domain = wi$FFO
x.min <- min(variable[domain==1], na.rm=T)
x.max <- max(variable[domain==1], na.rm=T)
total <- nwos_total(weight = weight, area = area, domain = domain, variable = 1)
total
x.quant.iter <- sum(x.min, x.max) / 2 # Midpoint
x.quant.iter
total2 <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= x.quant.iter, 1, 0),
variable = 1)
total2
domain * ifelse(variable >= x.quant.iter, 1, 0)
variable >= x.quant.iter
ifelse(variable >= x.quant.iter, 1, 0)
domain * ifelse(variable >= x.quant.iter, 1, 0)
domain = wi$FFO
total2 <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= x.quant.iter, 1, 0),
variable = 1)
total2
weight
area
x.max <- max(variable[domain == 1 & weight > 0], na.rm=T)
x.max
x.quant.iter <- sum(x.min, x.max) / 2 # Midpoint
total2 <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= x.quant.iter, 1, 0),
variable = 1)
total2
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
nwos_quantile()
x.quant <- numeric(0)
total <- nwos_total(weight = weight, area = area, domain = domain, variable = 1)
total
total.quant.iter <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(area >= x.quant.iter, 1, 0),
variable = variable)
quant.iter <- total.quant.iter / total
quant.iter
total.quant.iter
x.quant.iter <- sum(x.min, x.max) / 2 # Midpoint
x.quant.iter
x.quant.prev <- x.max
quant.iter <- 0
round(quant.iter,2)
(1-prob[p])
prob=c(0.00, 0.25, 0.50, 0.75, 1.00)
(1-prob[p])
p=2
prob[p]
(1-prob[p])
total.quant.iter <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(area >= x.quant.iter, 1, 0),
variable = variable)
total.quant.iter
total.quant.iter <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= x.quant.iter, 1, 0),
variable = variable)
total.quant.iter
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
nwos_quantile()
x.min <- min(variable[domain == 1 & weight > 0], na.rm=T)
x.max <- max(variable[domain == 1 & weight > 0], na.rm=T)
x.quant.iter <- sum(x.min, x.max) / 2 # Midpoint
x.quant.iter
total.quant.iter <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= x.quant.iter, 1, 0),
variable = variable)
total.quant.iter
total
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 10, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable <= 10, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable <= 1, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 1, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 10, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 100, 1, 0),
variable = variable)
variable[domain == 1 & weight > 0]
domain * ifelse(variable >= 100, 1, 0)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 1, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 1 & variable < 10, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 10, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 10  & variable < 100, 1, 0),
variable = variable)
nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= 10  & variable < 20, 1, 0),
variable = variable)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
load("/Volumes/DATA/base_2018_CYCLE_2018-03-16.RData")
View(quw)
load("/Volumes/DATA/base_2018_CYCLE_2018-03-16.RData")
names(quw)
meg <- quw %>%
select(AC_WOOD, # Acres owned
HOME, # Reside on property
OBJ_BEA, # Reason for owning - beauty
OWN1_AGE) # Owner age
?sample
meg <- quw %>%
select(AC_WOOD, # Acres owned
HOME, # Reside on property
OBJ_BEA, # Reason for owning - beauty
OWN1_AGE) %>% # Owner age
sample_n(100)
View(meg)
str(meg)
names(meg)
write_rds
?write_rds
?save
wd <- getwd()
setwd("/Users/brettbutler/Desktop/Meg/")
meg <- quw %>%
select(AC_WOOD, # Acres owned
HOME, # Reside on property
OBJ_BEA, # Reason for owning - beauty
OWN1_AGE) %>% # Owner age
sample_n(100)
write.csv(meg, file="MEG.csv")
save(meg, file="MEG.RData")
setwd(wd)
rm(meg, qu, quw)
total.quant.iter <- nwos_total(weight = weight, area = area,
domain = domain * ifelse(variable >= x.quant.iter, 1, 0))
total.quant.iter
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
nwos_quantile()
nwos_quantile(area = wi$AC_WOOD)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile_replicates.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile_replicates.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile_replicates.R')
WI_FFO_OWN_QUANT_REP <- sapply(1:length(WI_REPLICATES), nwos_quantile_replicates,
index.rep = WI_REPLICATES, data = wi,
weight.rep = WI_FFO_WEIGHTS_REP, owner.area.name = "OWNER",
domain.name = "FFO", variable.name = "AC_WOOD")
WI_FFO_OWN_QUANT_REP <- sapply(1:2, # length(WI_REPLICATES),
nwos_quantile_replicates,
index.rep = WI_REPLICATES, data = wi,
weight.rep = WI_FFO_WEIGHTS_REP, owner.area.name = "OWNER",
domain.name = "FFO", variable.name = "AC_WOOD")
WI_FFO_OWN_QUANT_REP
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_quantile_replicates.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_weights_trimmed.R')
nwos_weights_trimmed(weights = wi$WEIGHTS)
nwos_weights_trimmed(weights = wi$WEIGHT)
weights = wi$WEIGHT
weights
w <- weights
w.tot <- sum(w, na.rm=T)
w.tot
w.quant <- quantile(w, na.rm=T)
w.quant
w.quant <- quantile(w[w > 0], na.rm=T)
w.quant
w.iqr <- w.quant[4] - w.quant[2]
w.iqr
names(w.iqr)
w.iqr
# names(w.iqr) <- "iqr"
w.trim <- ifelse(w>(w.quant[4] + (1.5*w.iqr)), w.quant[4] + (1.5*w.iqr),
ifelse(w<(w.quant[2] - (1.5*w.iqr)), w.quant[2] - (1.5*w.iqr), w))
w.trim <- w.trim * (sum(w, na.rm=T) / sum(w.trim, na.rm=T))
w.trim
summary(w.trim)
summary(w.trim[w.trim>0])
summary(w[w>0])
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_weights_trimmed.R')
nwos_weights_trimmed(weights = wi$WEIGHT)
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_weights_trimmed.R')
wi$WEIGHT_TRIMMED <- nwos_weights_trimmed(weights = wi$WEIGHT)
?nwos_proportion
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_proportion.R')
?nwos_proportion
nwos_proportion
setwd("nwos")
document()
rm(list=ls())
devtools::install_git("git://github.com/bbutler01/nwos.git")
# devtools::install_git("git://github.com/bbutler01/nwos.git")
library(nwos)
document()
devtools::install_git("git://github.com/bbutler01/nwos.git")
# devtools::install_git("git://github.com/bbutler01/nwos.git")
library(nwos)
library(tidyverse)
wi <- tbl_df(read.csv("../data/wi.csv"))
wi <- wi %>% mutate(ROW_NAME = row.names(wi),
AC_WOOD = ACRES_FOREST)
WI_REPLICATES <- nwos_replicates(index = row.names(wi), point.count = wi$POINT_COUNT, R = 100)
View(WI_REPLICATES)
str(WI_REPLICATES)
wi <- wi %>% mutate(FFO = if_else(LAND_USE == 1 & OWN_CD == 45 & AC_WOOD >= 1, 1, 0)) # Add stratum variable, FFO
WI_FFO_AREA_REP <- sapply(WI_REPLICATES, nwos_stratum_area_replicates, data = wi, stratum.name = "FFO", state.area = 33898733)
100-18
113-18
?prop.test
5000/60
25*5000
125000/60
2083/60
document()
library(devtools)
library(roxygen2)
document()
?replicate
i < 1:2
i <- 1:2
p <- 2:3
rep(i,p)
?sample
?split
?col
nwos_replicates <- function(index, point.count, R = 2500) {
index <- rep(index, point.count)
replicates <- replicate(R, sample(data$index, NROW(data$index), replace = T)) # Generate replicates
split(replicates, col(replicates)) # Convert to list
}
nwos_replicates(i,p)
nwos_replicates <- function(index, point.count, R = 2500) {
index <- rep(index, point.count)
replicates <- replicate(R, sample(index, length(index), replace = T)) # Generate replicates
split(replicates, col(replicates)) # Convert to list
}
nwos_replicates(i,p)
nwos_replicates(i,p,2)
nwos_replicates(i,p,2)
x<-nwos_replicates(i,p,2)
x
x$1
x$`1`
nwos_replicates <- function(index, point.count, R = 2500) {
index <- rep(index, point.count)
replicates <- replicate(R, sample(index, length(index), replace = T)) # Generate replicates
split(replicates, col(replicates)) # Convert to list
return(replicates)
}
x<-nwos_replicates(i,p,2)
x
col(x)
split(x, col(x))
?mapply
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_weights.R')
source('~/Dropbox (FFRC)/NWOS/GENERAL/PRODUCTS/SCIENCE/WEIGHTING/PACKAGE/nwos/R/nwos_weights.R')
document()
document()
5/30/2020 - 12/1/2018
as.date(5/30/2020) - as.date(12/1/2018)
?date
??date
as.Date(5/30/2020) - as.Date(12/1/2018)
?as.Date
as.Date(5/30/2020)
as.Date(5/30/2020, "%m%d%y")
as.Date("5/30/2020", "%m%d%y")
as.Date("05/30/20", "%m%d%y")
as.Date("05/30/20")
as.Date("05/30/2020")
as.Date("5/30/2020")
?left_join
?gather
